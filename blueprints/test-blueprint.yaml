tosca_definitions_version: cloudify_dsl_1_3

description: >
  Create an Example Openstack Network.

imports:
  - http://cloudify.co/spec/cloudify/5.0.5/types.yaml
  - plugin:cloudify-openstack-plugin?version= >=2.14.17,  <=3.0.0

inputs:

  external_network_name:
    description: Openstack tenant external network name.
    default: ext-net

  username:
    description: OS_USERNAME as specified in Openstack RC file.
    default: { get_secret: openstack_username }

  password:
    description: Openstack user password.
    default: { get_secret: openstack_password }

  tenant_name:
    description: OS_TENANT_NAME as specified in Openstack RC file.
    default: { get_secret: openstack_tenant_name }

  auth_url:
    description: OS_AUTH_URL as specified in Openstack RC file.
    default: { get_secret: openstack_auth_url }

  region:
    description: OS_REGION_NAME as specified in Openstack RC file.
    default: { get_secret: openstack_region }

  image:
    description: Image ID
    default: { get_secret: base_image_id }

  flavor:
    description: Flavor ID
    default: { get_secret: base_flavor_id }

  public_key_material:
    default: { get_secret: agent_key_public }

  nameservers:
    default: [8.8.4.4, 8.8.8.8]

  public_subnet_cidr:
    default: 10.10.0.0/24

  public_subnet_allocation_pools:
    default:
    - start: 10.10.0.2
      end: 10.10.0.254

  resource_suffix:
    default: 1

  key_pair_name:
    default: { concat: [ examples_key, { get_input: resource_suffix } ] }

dsl_definitions:

  client_config: &client_config
    username: { get_input: username }
    password: { get_input: password }
    tenant_name: { get_input: tenant_name }
    auth_url: { get_input: auth_url }
    region: { get_input: region }

node_templates:

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *client_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *client_config

  public_network_router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *client_config
    relationships:
    - type: cloudify.relationships.connected_to
      target: external_network

  virtual_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_id: { get_attribute: [ external_network, external_id ] }
    relationships:
    - type: cloudify.relationships.depends_on
      target: external_network

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *client_config
      subnet:
        ip_version: 4
        cidr: { get_input: public_subnet_cidr }
        dns_nameservers: { get_input: nameservers }
        allocation_pools: { get_input: public_subnet_allocation_pools }
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_network
    - type: cloudify.openstack.subnet_connected_to_router
      target: public_network_router

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      resource_id: { get_input: key_pair_name }
      keypair:
        public_key: { get_input: public_key_material }

  vm:
    type: cloudify.openstack.nodes.Server
    properties:
      agent_config:
        install_method: none
      image: { get_input: image }
      flavor: { get_input: flavor }
      management_network_name: { get_property: [ public_network, resource_id ] }
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: virtual_ip
      - type: cloudify.openstack.server_connected_to_security_group
        target: security_group
